/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.inf.infosistemas.interfaces;

import br.inf.infosistemas.dao.Conexao;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Path;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;

/**
 *
 * @author SUPORTE02
 */
public class FormJtable extends javax.swing.JFrame {

    /**
     * Creates new form FormJtable
     */
    Config config;

    public FormJtable() throws IOException, FileNotFoundException, ClassNotFoundException {
        initComponents();

        carregarConfig();

        //data
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        jLabelData.setText(formato.format(dataSistema));
        jProgressBarExportXml.setVisible(false);
        jProgressBarExportXml.setStringPainted(true);
        

        // this.jProgressBarExportXml.setValue(50);
        //this.jProgressBarExportXml.setValue(60);
        //this.jProgressBarExportXml.setMaximum(100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        salvarConfig = new javax.swing.JButton();
        exportar = new javax.swing.JButton();
        abrirDiretorio = new javax.swing.JButton();
        txtPath = new javax.swing.JTextField();
        horaExportacao = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        JFormattedTextFieldDataInicio = new javax.swing.JFormattedTextField();
        JFormattedTextFieldDataFim = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jCheckBoxNfce = new javax.swing.JCheckBox();
        jCheckBoxNfe = new javax.swing.JCheckBox();
        jCheckBoxEntradas = new javax.swing.JCheckBox();
        jLabelData = new javax.swing.JLabel();
        jProgressBarExportXml = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Exportador de XML");

        jPanel1.setForeground(new java.awt.Color(102, 102, 255));

        jLabel1.setText("Pasta de Exportação XML:");

        jLabel2.setText("Agendamento:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setText("Info XML");

        salvarConfig.setText("Salvar");
        salvarConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarConfigActionPerformed(evt);
            }
        });

        exportar.setText("Exportar");
        exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarActionPerformed(evt);
            }
        });

        abrirDiretorio.setText("Abrir Pasta");
        abrirDiretorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirDiretorioActionPerformed(evt);
            }
        });

        txtPath.setEditable(false);
        txtPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPathActionPerformed(evt);
            }
        });

        try {
            horaExportacao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        horaExportacao.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        horaExportacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horaExportacaoActionPerformed(evt);
            }
        });
        horaExportacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                horaExportacaoKeyPressed(evt);
            }
        });

        jLabel3.setText("Periodo:");

        try {
            JFormattedTextFieldDataInicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        JFormattedTextFieldDataInicio.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        JFormattedTextFieldDataInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JFormattedTextFieldDataInicioActionPerformed(evt);
            }
        });
        JFormattedTextFieldDataInicio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JFormattedTextFieldDataInicioKeyPressed(evt);
            }
        });

        try {
            JFormattedTextFieldDataFim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        JFormattedTextFieldDataFim.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        JFormattedTextFieldDataFim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JFormattedTextFieldDataFimActionPerformed(evt);
            }
        });
        JFormattedTextFieldDataFim.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JFormattedTextFieldDataFimKeyPressed(evt);
            }
        });

        jLabel5.setText("a");

        jCheckBoxNfce.setText("NFC-e");
        jCheckBoxNfce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNfceActionPerformed(evt);
            }
        });

        jCheckBoxNfe.setText("NF-e");
        jCheckBoxNfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxNfeActionPerformed(evt);
            }
        });

        jCheckBoxEntradas.setText("Entradas");
        jCheckBoxEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxEntradasActionPerformed(evt);
            }
        });

        jLabelData.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(abrirDiretorio))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(145, 145, 145)
                                .addComponent(jLabel4))
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JFormattedTextFieldDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(JFormattedTextFieldDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(salvarConfig)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jProgressBarExportXml, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(horaExportacao, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jCheckBoxNfce)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxNfe)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(exportar))
                                    .addComponent(jCheckBoxEntradas)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 10, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(abrirDiretorio)
                    .addComponent(txtPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(horaExportacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxNfce)
                    .addComponent(jCheckBoxNfe)
                    .addComponent(jCheckBoxEntradas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(JFormattedTextFieldDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JFormattedTextFieldDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(exportar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(salvarConfig)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBarExportXml, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarActionPerformed

        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");

        if (jCheckBoxNfce.isSelected() || jCheckBoxNfe.isSelected() || jCheckBoxEntradas.isSelected()) {
            if (JFormattedTextFieldDataInicio.getText().trim().length() > 9 && JFormattedTextFieldDataFim.getText().trim().length() > 9) {

                try {

                    // System.out.println("tamanho da data" + JFormattedTextFieldDataInicio.getText().trim().length());
                    Date data1 = formato.parse(JFormattedTextFieldDataInicio.getText());
                    Date data2 = formato.parse(JFormattedTextFieldDataFim.getText());

                    exportaXml(txtPath.getText(), data1, data2, config.getNfe(), config.getNfc(), config.getEntradas());
                } catch (IOException ex) {
                    Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParseException ex) {
                    Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Entre com uma data Valida!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Escolha um ou mais modelos para esportação:\nNFC-e\nNF-e\nEntradas");
        }

        // System.out.println(data1);
        //System.out.println(formato.format(data1));

    }//GEN-LAST:event_exportarActionPerformed

    /*
    public Date getStringToData(String pData) {
		java.util.Date data = null;
		SimpleDateFormat formatDate;
		
		try{
			try{
				formatDate = new SimpleDateFormat("MM/dd/yyyy");
				data = formatDate.parse(pData);
			}catch (Exception e) {
				try {
					formatDate = new SimpleDateFormat("MM/dd/yyyy");
					data = formatDate.parse(pData);
				}catch (Exception e1){
					formatDate = new SimpleDateFormat("MM/dd/yyyy");
					data = formatDate.parse(pData);
				}
				
			}
		} catch (Exception e){
			
		}
                 System.out.println(data);
                 System.out.println(JFormattedTextFieldDataInicio.getText());
               
		return new Date(data.getTime());
	} */

    private void salvarConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarConfigActionPerformed

        // try { 
        // SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        String hora = horaExportacao.getText();
        //Date d = (Date) sdf.parse(hora);

        // config = new Config(txtPath.getText(), hora);
        config = new Config(txtPath.getText(), hora, jCheckBoxNfce.isSelected(), jCheckBoxNfe.isSelected(), jCheckBoxEntradas.isSelected());
        //config = new Config();
        //System.out.println("hora capturada: " + hora);
        // System.out.println("selectd nfe: " + jCheckBoxNfce.isSelected());
        // } catch (ParseException e) { e.printStackTrace(); }

        try {
            ObjectOutputStream arquivoGravar = new ObjectOutputStream(new FileOutputStream(new File("infoxml.dat")));
            arquivoGravar.writeObject(config); //aqui entra o objeto
            JOptionPane.showMessageDialog(null, "Configuração gravada com sucesso");
        } catch (IOException erro) {
            JOptionPane.showMessageDialog(null, "Erro ao tentar gravar os dados no aquivo infoxml.dat, erro: " + erro);
        }

    }//GEN-LAST:event_salvarConfigActionPerformed

    public void carregarConfig() throws FileNotFoundException, IOException, ClassNotFoundException {

        try {
            ObjectInputStream configLer = new ObjectInputStream(new FileInputStream("infoxml.dat"));
            config = (Config) configLer.readObject();

            txtPath.setText(config.getPatch());
            jCheckBoxNfce.setSelected(config.getNfc());
            jCheckBoxNfe.setSelected(config.getNfe());
            jCheckBoxEntradas.setSelected(config.getEntradas());
            horaExportacao.setText(config.getHoraExportacao());

        } catch (ClassNotFoundException erro) {
            JOptionPane.showMessageDialog(null, "Erro de classe erro = " + erro);
        } catch (FileNotFoundException erro) {
            JOptionPane.showMessageDialog(null, "O arquivo de configuração: infoxml.dat não foi encontrado.: erro = " + erro);

        } catch (IOException erro) {
            JOptionPane.showMessageDialog(null, "Erro ao tentar ler dados no arquivo de configurção: infoxml.dat erro= " + erro);
        }

    }


    private void abrirDiretorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirDiretorioActionPerformed
        JFileChooser diretorio = new JFileChooser();
        diretorio.setDialogTitle("Selecionar pasta de exportação xml");
        //diretorio.showOpenDialog(this);
        diretorio.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int retorno = diretorio.showOpenDialog(this);

        if (retorno == JFileChooser.APPROVE_OPTION) {

            File path = diretorio.getSelectedFile();
            txtPath.setText(path.getPath());

        }


    }//GEN-LAST:event_abrirDiretorioActionPerformed

    public void exportaXml(String path, Date dataI, Date dataF, Boolean xmlNfe, Boolean xmlNfc, Boolean xmlEntrada) throws IOException, SQLException {

        new Thread() {
            @Override
            public void run() {

                if (!path.isEmpty()) {
                    ResultSet rs = null;
                    Connection connection = null;
                    try {
                        connection = Conexao.conectar();
                    } catch (IOException ex) {
                        Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                        //JOptionPane.showMessageDialog(null, "Conexão firebird falhou!\nVerifique se o banco esta em:\nC:\\info Sistemas\\dados");
                    }
                    PreparedStatement stmt = null;

                    //System.out.println("entrou no pach, " + "nfe: " + xmlNfe + ", nfc: " + xmlNfc + ", entradas: " + xmlEntrada);
                    if (null != dataI && null != dataF) {
                        //System.out.println("entrou na data, " + "nfe: " + xmlNfe + ", nfc: " + xmlNfc + ", entradas: " + xmlEntrada);
                        java.sql.Date dataInicio = new java.sql.Date(dataI.getTime());
                        java.sql.Date dataFim = new java.sql.Date(dataF.getTime());
                        //java.util.Date data = new java.util.Date(); 

                        //entra para exportar, testar parametros
                        if (xmlNfe) {
                            //como o firebird não esta retornando numero de linhas com a função last(), uso outro resultset
                            String sqlCountRegistros = "select count(*) as numeroLinhas from nfe_xml where cast(data as date) between ? and ? ";
                            try {
                                stmt = connection.prepareStatement(sqlCountRegistros);
                                stmt.setDate(1, dataInicio);
                                stmt.setDate(2, dataFim);
                                rs = stmt.executeQuery();
                                int numeroLinhas = 0;
                                while (rs.next()) {
                                    numeroLinhas = rs.getInt("numeroLinhas");
                                    //System.out.println("numero de linhas do resultset: " + numeroLinhas); 

                                }
                                jProgressBarExportXml.setMaximum(numeroLinhas);

                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            stmt = null;
                            rs = null;
                            //fim da gambiarra para pegar o numero de linhas do resultset

                            String sqlNfe = "select * from nfe_xml where cast(data as date) between ? and ? ";

                            try {
                                stmt = connection.prepareStatement(sqlNfe);
                                stmt.setDate(1, dataInicio);
                                stmt.setDate(2, dataFim);
                                rs = stmt.executeQuery();
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            try {
                                //verifica se tem conteudo
                                if (!rs.isBeforeFirst()) {
                                    JOptionPane.showMessageDialog(null, "XML das NF-e não encontrados para o periodo informado!");

                                } else {
                                    int total = 0;
                                    //System.out.println("numero de linhas do resultset: " + rs.last());
                                    //rs.last(); //vai para o final do resultset
                                    // int count = rs.getRow(); // agora count tem o numero de linhas para a barra de progresso
                                    //System.out.println("numero de linhas do resultset: " + count);                                   
                                    //  jProgressBarExportXml.set;
                                    // rs.beforeFirst(); // volta o resultset para o inicio
                                    //firebird não suporta as operações acima 
                                    jProgressBarExportXml.setVisible(true);
                                    jProgressBarExportXml.setString("Exportando as NF-e");
                                    while (rs.next()) {

                                        String fileName = rs.getString("ARQUIVO");
                                        Blob mapBlob = rs.getBlob("XML");
                                        byte[] arquivo = null;
                                        arquivo = mapBlob.getBytes(1, (int) mapBlob.length());

                                        // cria se o arquivo nao existir
                                        File file = new File(path + "\\" + fileName);
                                        if (!file.exists()) {
                                            try {
                                                file.createNewFile();

                                                // System.out.println("Arquivo Criado!" + path + "\\" + fileName + ".xml");
                                            } catch (IOException ex) {
                                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }

                                        FileOutputStream fos = null;
                                        try {
                                            fos = new FileOutputStream(file);
                                        } catch (FileNotFoundException ex) {
                                            Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        try {
                                            fos.write(arquivo);
                                        } catch (IOException ex) {
                                            Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        total++;

//atualizaria a barra mas não sei o tamanho do resultset, entao deixa quieto
                                        jProgressBarExportXml.setValue(total);
                                        try {
                                            sleep(200);
                                        } catch (InterruptedException ex) {
                                            System.out.println(ex.getMessage());
                                        }

                                        fos.close();
                                    }
                                    if (total > 0) {
                                        JOptionPane.showMessageDialog(null, "XML das NF-e foram exportados com sucesso!\nTotal de arquivos: " + total + "\nDiretorio: " + path);
                                        jProgressBarExportXml.setVisible(false);
                                        jProgressBarExportXml.setValue(0);
                                    }

                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        if (xmlNfc) {
                            //gambiarra para capturar o numero de linhas ja que o firebird não retorna pelas funções resultset
                            String sqlCountRegistros = "select count(*) as numeroLinhas from xml_nfc where cast(data as date) between ? and ? and autorizacao<>'' ";
                            try {
                                stmt = connection.prepareStatement(sqlCountRegistros);
                                stmt.setDate(1, dataInicio);
                                stmt.setDate(2, dataFim);
                                rs = stmt.executeQuery();
                                int numeroLinhas = 0;
                                while (rs.next()) {
                                    numeroLinhas = rs.getInt("numeroLinhas");
                                    System.out.println("numero de linhas do resultset: " + numeroLinhas); 

                                }
                                jProgressBarExportXml.setMaximum(numeroLinhas);

                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            stmt = null;
                            rs = null;
                            //fim da gambiarra para pegar o numero de linhas do resultset

                            String sqlNfc = "select * from xml_nfc where cast(data as date) between ? and ? and autorizacao<>'' ";

                            try {
                                stmt = connection.prepareStatement(sqlNfc);
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                stmt.setDate(1, dataInicio);
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                stmt.setDate(2, dataFim);
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            try {
                                rs = stmt.executeQuery();
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            try {
                                if (!rs.isBeforeFirst()) {
                                    JOptionPane.showMessageDialog(null, "XML das NFC-e não encontrados para o periodo informado!");

                                } else {

                                    int total = 0;
                                    jProgressBarExportXml.setVisible(true);
                                    jProgressBarExportXml.setString("Exportando as NFC-e");
                                    while (rs.next()) {

                                        String fileName = rs.getString("CHAVE");
                                        Blob mapBlob = rs.getBlob("ARQUIVO");
                                        byte[] arquivo = null;
                                        arquivo = mapBlob.getBytes(1, (int) mapBlob.length());

                                        // cria se o arquivo nao existir
                                        File file = new File(path + "\\" + fileName + "-Nfc.xml");
                                        if (!file.exists()) {
                                            try {
                                                file.createNewFile();

                                                // System.out.println("Arquivo Criado!" + path + "\\" + fileName + ".xml");
                                            } catch (IOException ex) {
                                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                                            }
                                        }

                                        FileOutputStream fos = null;
                                        try {
                                            fos = new FileOutputStream(file);
                                        } catch (FileNotFoundException ex) {
                                            Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        try {
                                            fos.write(arquivo);
                                        } catch (IOException ex) {
                                            Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        total++;
                                        jProgressBarExportXml.setValue(total);
                                        try {
                                            sleep(100);
                                        } catch (InterruptedException ex) {
                                            System.out.println(ex.getMessage());
                                        }

                                        
                                    }

                                    if (total > 0) {
                                        JOptionPane.showMessageDialog(null, "XML das NF-e foram exportados com sucesso!\nTotal de arquivos: " + total + "\nDiretorio: " + path);
                                        jProgressBarExportXml.setVisible(false);
                                        jProgressBarExportXml.setValue(0);
                                    }
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                        if (xmlEntrada) {
                            //gambiarra para capturar o numero de linhas ja que o firebird não retorna pelas funções resultset
                            String sqlCountRegistros = "select count(*) as numeroLinhas from nfe_xml_entrada where cast(data as date) between ? and ? ";
                            try {
                                stmt = connection.prepareStatement(sqlCountRegistros);
                                stmt.setDate(1, dataInicio);
                                stmt.setDate(2, dataFim);
                                rs = stmt.executeQuery();
                                int numeroLinhas = 0;
                                while (rs.next()) {
                                    numeroLinhas = rs.getInt("numeroLinhas");
                                    //System.out.println("numero de linhas do resultset: " + numeroLinhas); 

                                }
                                jProgressBarExportXml.setMaximum(numeroLinhas);

                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            stmt = null;
                            rs = null;
                            //fim da gambiarra para pegar o numero de linhas do resultset

                            String sqlEntradas = "select * from nfe_xml_entrada where cast(data as date) between ? and ? ";
                            try {
                                stmt = connection.prepareStatement(sqlEntradas);
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                stmt.setDate(1, dataInicio);
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                stmt.setDate(2, dataFim);
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            try {
                                rs = stmt.executeQuery();
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }

                            try {
                                if (!rs.isBeforeFirst()) {
                                    JOptionPane.showMessageDialog(null, "XML das Entradas não encontrados para o periodo informado!");

                                } else {

                                    int total = 0;
                                    jProgressBarExportXml.setVisible(true);
                                    jProgressBarExportXml.setString("Exportando as Entradas");
                                    while (rs.next()) {

                                        String fileName = rs.getString("ARQUIVO");
                                        Blob mapBlob = rs.getBlob("XML");
                                        byte[] arquivo = null;
                                        arquivo = mapBlob.getBytes(1, (int) mapBlob.length());

                                        // cria se o arquivo nao existir
                                        File file = new File(path + "\\" + fileName);
                                        if (!file.exists()) {
                                            file.createNewFile();

                                            // System.out.println("Arquivo Criado!" + path + "\\" + fileName + ".xml");
                                        }

                                        FileOutputStream fos = new FileOutputStream(file);
                                        fos.write(arquivo);
                                        total++;
                                        jProgressBarExportXml.setValue(total);
                                        try {
                                            sleep(100);
                                        } catch (InterruptedException ex) {
                                            System.out.println(ex.getMessage());
                                        }
                                        fos.close();
                                    }

                                    if (total > 0) {
                                        JOptionPane.showMessageDialog(null, "XML das Entradas foram exportados com sucesso!\nTotal de arquivos: " + total + "\nDiretorio: " + path);
                                        jProgressBarExportXml.setVisible(false);
                                        jProgressBarExportXml.setValue(0);
                                    }

                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Digite um periodo valido!");

                    }
                    try {
                        connection.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Escolha uma pasta para exportação!");
                }
            }
        }.start();
        //ResultSet rs = null;
    }

    //public void atualiza(int valor){ jProgressBarExportXml.setValue(valor); }  

    private void txtPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPathActionPerformed

    private void horaExportacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horaExportacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horaExportacaoActionPerformed

    private void JFormattedTextFieldDataInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JFormattedTextFieldDataInicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JFormattedTextFieldDataInicioActionPerformed

    private void horaExportacaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_horaExportacaoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            salvarConfig.requestFocus();
        }
    }//GEN-LAST:event_horaExportacaoKeyPressed

    private void JFormattedTextFieldDataInicioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JFormattedTextFieldDataInicioKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            JFormattedTextFieldDataFim.requestFocus();
        }
    }//GEN-LAST:event_JFormattedTextFieldDataInicioKeyPressed

    private void JFormattedTextFieldDataFimKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JFormattedTextFieldDataFimKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            exportar.requestFocus();
        }
    }//GEN-LAST:event_JFormattedTextFieldDataFimKeyPressed

    private void jCheckBoxNfceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNfceActionPerformed
        config.setNfc(jCheckBoxNfce.isSelected());
    }//GEN-LAST:event_jCheckBoxNfceActionPerformed

    private void JFormattedTextFieldDataFimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JFormattedTextFieldDataFimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JFormattedTextFieldDataFimActionPerformed

    private void jCheckBoxNfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxNfeActionPerformed
        config.setNfe(jCheckBoxNfe.isSelected());
    }//GEN-LAST:event_jCheckBoxNfeActionPerformed

    private void jCheckBoxEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxEntradasActionPerformed
        config.setEntradas(jCheckBoxEntradas.isSelected());
    }//GEN-LAST:event_jCheckBoxEntradasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, ClassNotFoundException {
        //substitui a interfale da configuração padrão
        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.graphite.GraphiteLookAndFeel");
            // https://malalanayake.wordpress.com/2012/10/16/java-themes-with-jtattoo/
        } catch (Exception e) {
        }

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("".equals(info.getName())) { //"Nimbus", "Metal", "Windows"
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormJtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormJtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormJtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormJtable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FormJtable().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FormJtable.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
        );

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField JFormattedTextFieldDataFim;
    private javax.swing.JFormattedTextField JFormattedTextFieldDataInicio;
    private javax.swing.JButton abrirDiretorio;
    private javax.swing.JButton exportar;
    private javax.swing.JFormattedTextField horaExportacao;
    private javax.swing.JCheckBox jCheckBoxEntradas;
    private javax.swing.JCheckBox jCheckBoxNfce;
    private javax.swing.JCheckBox jCheckBoxNfe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelData;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBarExportXml;
    private javax.swing.JButton salvarConfig;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables

}
